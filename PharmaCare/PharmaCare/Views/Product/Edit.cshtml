@model PharmaCare.ViewModels.ProductViewModel
@{
    ViewData["Title"] = "Edit Product";
    Layout = "~/Views/Shared/_Adminlayout.cshtml";
}
<style>
    /* Ensure button text remains white for better contrast */
    .btn-primary {
        color: #fff !important;
    }

        .btn-primary:hover {
            color: #fff !important;
        }
</style>
<!-- Page header with title and navigation controls -->
<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2 page-title">Edit Product</h1>
    <div class="btn-toolbar mb-2 mb-md-0">
        <div class="btn-group mr-2">
            <!-- Back to product list navigation link -->
            <a href="@Url.Action("Index", "Product")" class="btn btn-sm btn-outline-secondary">
                <i class="fas fa-arrow-left"></i> Back to List
            </a>
        </div>
    </div>
</div>
<!-- Main content layout with edit form and help sidebar -->
<div class="row">
    <div class="col-lg-8">
        <div class="form-card">
            <!-- Product edit form with file upload support for image updates -->
            <form asp-action="Edit" enctype="multipart/form-data" method="post">
                <!-- Display model-level validation errors -->
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <!-- Hidden fields to preserve data integrity during edit -->
                <input type="hidden" name="ProductId" value="@Model.ProductId" />
                <input type="hidden" name="ImageUrl" value="@Model.ImageUrl" />
                <input type="hidden" name="CreatedAt" value="@Model.CreatedAt.ToString("o")" />

                <!-- Product name field - main identifier for customers -->
                <div class="form-group">
                    <label for="ProductName" class="control-label">Product Name</label>
                    <input type="text" id="ProductName" name="ProductName" class="form-control" value="@Model.ProductName" />
                    <span asp-validation-for="ProductName" class="text-danger"></span>
                </div>

                <!-- Product description field for detailed product information -->
                <div class="form-group">
                    <label for="Description" class="control-label">Description</label>
                    <textarea id="Description" name="Description" class="form-control" rows="4">@Model.Description</textarea>
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>

                <!-- Price and stock fields arranged in two-column layout -->
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="Price" class="control-label">Price</label>
                            <!-- Price input with validation to prevent invalid characters and multiple decimals -->
                            <input type="number" id="Price" name="Price" class="form-control" value="@Model.Price" step="0.01" min="0"
                                   onkeydown="return event.keyCode !== 69 && event.keyCode !== 187 && event.keyCode !== 189"
                                   oninput="this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1')" />
                            <span asp-validation-for="Price" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="Stock" class="control-label">Stock</label>
                            <!-- Stock input with validation to allow only positive integers -->
                            <input type="number" id="Stock" name="Stock" class="form-control" value="@Model.Stock" min="0"
                                   onkeydown="return event.keyCode !== 69 && event.keyCode !== 187 && event.keyCode !== 189"
                                   oninput="this.value = this.value.replace(/[^0-9]/g, '')" />
                            <span asp-validation-for="Stock" class="text-danger"></span>
                        </div>
                    </div>
                </div>

                <!-- CRITICAL: Expiry date field for pharmaceutical safety -->
                <div class="form-group">
                    <label for="ExpiryDate" class="control-label">Expiry Date</label>
                    <input type="date" id="ExpiryDate" name="ExpiryDate" class="form-control"
                           value="@Model.ExpiryDate.ToString("yyyy-MM-dd")"
                           min="@DateTime.Now.ToString("yyyy-MM-dd")" />
                    <span asp-validation-for="ExpiryDate" class="text-danger"></span>

                    <!-- Current expiry status display -->
                    <div class="mt-2">
                        <span class="badge @Model.ExpiryBadgeClass">
                            <i class="fas fa-calendar-times"></i> @Model.ExpiryDisplayText
                        </span>
                        @if (Model.IsExpired)
                        {
                            <small class="text-danger d-block mt-1">
                                <i class="fas fa-exclamation-triangle"></i>
                                This product is expired and cannot be sold to customers.
                            </small>
                        }
                        else if (Model.IsExpiringSoon)
                        {
                            <small class="text-warning d-block mt-1">
                                <i class="fas fa-exclamation-circle"></i>
                                This product is expiring soon. Consider updating inventory.
                            </small>
                        }
                    </div>
                </div>

                <!-- Current image display section -->
                <div class="form-group">
                    <label>Current Image</label>
                    @if (!string.IsNullOrEmpty(Model.ImageUrl))
                    {
                        <div>
                            <img src="@Model.ImageUrl" alt="@Model.ProductName" class="current-image" style="max-height:150px;" />
                        </div>
                    }
                    else
                    {
                        <p>No image available</p>
                    }
                </div>

                <!-- Image update field with optional replacement -->
                <div class="form-group">
                    <label for="File" class="control-label">Update Image</label>
                    <div class="custom-file">
                        <input type="file" class="custom-file-input" id="customFile" name="File" />
                        <label class="custom-file-label" for="customFile">Choose file</label>
                    </div>
                    <small class="form-text text-muted">Leave empty to keep current image</small>
                </div>

                <!-- Product visibility toggle - determines if product appears to customers -->
                <div class="form-group">
                    <div class="custom-control custom-switch">
                        <input type="checkbox" class="custom-control-input" id="activeSwitch" name="IsActive" @(Model.IsActive ? "checked" : "") />
                        <label class="custom-control-label" for="activeSwitch">Is Active</label>
                    </div>
                    @if (Model.IsExpired)
                    {
                        <small class="text-muted">
                            <i class="fas fa-info-circle"></i>
                            Expired products are automatically hidden from customers regardless of this setting.
                        </small>
                    }
                </div>

                <!-- Prescription requirement toggle for pharmacy regulations -->
                <div class="form-group">
                    <div class="custom-control custom-switch">
                        <input type="checkbox" class="custom-control-input" id="prescriptionSwitch" name="RequiresPrescription" @(Model.RequiresPrescription ? "checked" : "") />
                        <label class="custom-control-label" for="prescriptionSwitch">Requires Prescription</label>
                    </div>
                    <small class="form-text text-muted">Enable this for medications that require a prescription to purchase.</small>
                </div>

                <!-- Conditional prescription note field - visibility based on prescription requirement -->
                <div class="form-group prescription-note" style="display: @(Model.RequiresPrescription ? "block" : "none");">
                    <label for="PrescriptionNote" class="control-label">Prescription Note</label>
                    <textarea id="PrescriptionNote" name="PrescriptionNote" class="form-control" rows="3"
                              placeholder="Example: This item requires a valid prescription. You can reserve online but must visit the pharmacy with your prescription to complete the purchase.">@Model.PrescriptionNote</textarea>
                </div>

                <!-- Category selection dropdown for product organization -->
                <div class="form-group">
                    <label for="CategoryID" class="control-label">Category</label>
                    <select id="CategoryID" name="CategoryID" class="form-control" asp-items="Model.ListOfCategories"></select>
                    <span asp-validation-for="CategoryID" class="text-danger"></span>
                </div>

                <!-- Form submission and cancellation controls -->
                <div class="form-group mt-4">
                    <!-- Save changes button -->
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save"></i> Save Changes
                    </button>
                    <a href="@Url.Action("Index", "Product")" class="btn btn-outline-secondary ml-2">Cancel</a>
                </div>
            </form>
        </div>
    </div>

    <!-- Help sidebar with field descriptions and guidance -->
    <div class="col-lg-4">
        <div class="form-card">
            <div class="card-header">
                <h5 class="m-0 font-weight-bold">Help</h5>
            </div>
            <div class="p-3">
                <!-- Field-by-field explanation for editing products -->
                <p><strong>Product Name:</strong> Enter the name of the product as it will appear to customers.</p>
                <p><strong>Description:</strong> Provide a detailed description of the product's features and benefits.</p>
                <p><strong>Price:</strong> Set the retail price for this product.</p>
                <p><strong>Stock:</strong> Enter the current inventory quantity.</p>
                <p><strong>Expiry Date:</strong> <span class="text-danger">CRITICAL</span> - Update the expiration date if necessary. Expired products are automatically hidden from customers.</p>
                <p><strong>Image:</strong> Upload a high-quality image (recommended size: 800x800px).</p>
                <p><strong>Is Active:</strong> Toggle to make the product visible to customers.</p>
                <p><strong>Requires Prescription:</strong> Enable for medications that can only be sold with a valid prescription.</p>
                <p><strong>Prescription Note:</strong> Message shown to customers explaining the prescription requirement.</p>
                <p><strong>Category:</strong> Select the appropriate category for this product.</p>
            </div>
        </div>

        <!-- Expiry Status Info -->
        <div class="form-card mt-3">
            <div class="card-header bg-info">
                <h6 class="m-0 font-weight-bold text-white">
                    <i class="fas fa-info-circle"></i> Expiry Status
                </h6>
            </div>
            <div class="p-3">
                <div class="mb-2">
                    <strong>Current Status:</strong>
                    <span class="badge @Model.ExpiryBadgeClass ml-1">@Model.ExpiryDisplayText</span>
                </div>
                <div class="mb-2">
                    <strong>Expiry Date:</strong> @Model.ExpiryDate.ToString("MMM dd, yyyy")
                </div>
                <div class="mb-2">
                    <strong>Days Remaining:</strong> @((Model.ExpiryDate.Date - DateTime.Now.Date).Days) days
                </div>

                @if (Model.IsExpired)
                {
                    <div class="alert alert-danger p-2 mt-2">
                        <small><i class="fas fa-times-circle"></i> Product is expired</small>
                    </div>
                }
                else if (Model.IsExpiringSoon)
                {
                    <div class="alert alert-warning p-2 mt-2">
                        <small><i class="fas fa-exclamation-triangle"></i> Expiring soon</small>
                    </div>
                }
                else
                {
                    <div class="alert alert-success p-2 mt-2">
                        <small><i class="fas fa-check-circle"></i> Product is fresh</small>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // File input display functionality - shows selected filename
        $(".custom-file-input").on("change", function() {
            var fileName = $(this).val().split("\\").pop();
            $(this).siblings(".custom-file-label").addClass("selected").html(fileName);
        });

        // Prescription note field toggle based on prescription requirement
        $(document).ready(function() {
            $('#prescriptionSwitch').change(function() {
                if($(this).is(':checked')) {
                    $('.prescription-note').show();
                } else {
                    $('.prescription-note').hide();
                    $('#PrescriptionNote').val('');
                }
            });
        });
    </script>
    @{
        /* Include client-side validation scripts for form validation */
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}