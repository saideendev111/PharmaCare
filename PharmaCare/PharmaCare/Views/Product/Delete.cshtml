@model PharmaCare.Models.Product
@{
    ViewData["Title"] = "Delete Product";
    Layout = "~/Views/Shared/_Adminlayout.cshtml";
}
<style>
    /* Ensure button text remains white for better contrast */
    .btn-primary {
        color: #fff !important;
    }

        .btn-primary:hover {
            color: #fff !important;
        }

    .btn-danger {
        color: #fff !important;
    }

        .btn-danger:hover {
            color: #fff !important;
        }
    /* Expiry status styling in delete view */
    .expiry-status {
        padding: 0.5rem;
        border-radius: 0.25rem;
        margin-bottom: 1rem;
    }

    .expiry-expired {
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
    }

    .expiry-warning {
        background-color: #fff3cd;
        border: 1px solid #ffeaa7;
    }

    .expiry-good {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
    }
</style>

<!-- Page header with title and navigation controls -->
<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2 page-title">Delete Product</h1>
    <div class="btn-toolbar mb-2 mb-md-0">
        <div class="btn-group mr-2">
            <!-- Back to product list navigation link -->
            <a href="@Url.Action("Index", "Product")" class="btn btn-sm btn-outline-secondary">
                <i class="fas fa-arrow-left"></i> Back to List
            </a>
        </div>
    </div>
</div>

<!-- Main content layout with deletion confirmation and information sidebar -->
<div class="row">
    <div class="col-lg-8">
        <div class="delete-card">
            <!-- Warning message about permanent deletion consequences -->
            <div class="alert-delete">
                <h5><i class="fas fa-exclamation-triangle"></i> Warning!</h5>
                <p>Are you sure you want to permanently delete this product? This action cannot be undone.</p>
            </div>

            <!-- NEW: Expiry Status Alert -->
            @if (Model != null)
            {
                var daysUntilExpiry = (Model.ExpiryDate.Date - DateTime.Now.Date).Days;
                var expiryClass = daysUntilExpiry < 0 ? "expiry-expired" : (daysUntilExpiry <= 30 ? "expiry-warning" : "expiry-good");
                var expiryText = daysUntilExpiry < 0 ? "EXPIRED" : (daysUntilExpiry <= 30 ? "EXPIRING SOON" : "FRESH");
                var expiryIcon = daysUntilExpiry < 0 ? "fa-times-circle" : (daysUntilExpiry <= 30 ? "fa-exclamation-triangle" : "fa-check-circle");

                <div class="expiry-status @expiryClass">
                    <h6><i class="fas @expiryIcon"></i> Expiry Status: @expiryText</h6>
                    <p class="mb-0">
                        <strong>Expiry Date:</strong> @Model.ExpiryDate.ToString("MMM dd, yyyy")
                        @if (daysUntilExpiry < 0)
                        {
                            <span class="text-danger"> (Expired @Math.Abs(daysUntilExpiry) days ago)</span>
                        }
                        else
                        {
                            <span> (@daysUntilExpiry days remaining)</span>
                        }
                    </p>
                </div>
            }

            <!-- Product information display for confirmation before deletion -->
            <div class="row">
                <div class="col-md-4 text-center">
                    <!-- Product image display or placeholder if no image exists -->
                    @if (!string.IsNullOrEmpty(Model?.ImageUrl))
                    {
                        <img src="@Model.ImageUrl" alt="@Model.ProductName" class="product-image img-fluid mb-3" />
                    }
                    else
                    {
                        <div class="product-image bg-light d-flex align-items-center justify-content-center mb-3">
                            <i class="fas fa-image fa-3x text-muted"></i>
                        </div>
                    }
                </div>
                <div class="col-md-8">
                    <!-- Product name with null safety -->
                    <h4>@(Model?.ProductName ?? "Product")</h4>
                    <!-- Detailed product information in definition list format -->
                    <dl class="row mt-3">
                        <dt class="col-sm-4">Product ID</dt>
                        <dd class="col-sm-8">@(Model?.ProductId ?? 0)</dd>

                        <dt class="col-sm-4">Price</dt>
                        <dd class="col-sm-8">$@(Model?.Price.ToString("0.00") ?? "0.00")</dd>

                        <dt class="col-sm-4">Stock</dt>
                        <dd class="col-sm-8">@(Model?.Stock ?? 0)</dd>

                        <!-- NEW: Expiry Date Information -->
                        <dt class="col-sm-4">Expiry Date</dt>
                        <dd class="col-sm-8">
                            @(Model?.ExpiryDate.ToString("MMM dd, yyyy") ?? "Not Set")
                            @if (Model != null)
                            {
                                var daysUntilExpiry = (Model.ExpiryDate.Date - DateTime.Now.Date).Days;
                                @if (daysUntilExpiry < 0)
                                {
                                    <span class="badge badge-danger ml-2">Expired</span>
                                }
                                else if (daysUntilExpiry <= 30)
                                {
                                    <span class="badge badge-warning ml-2">Expiring Soon</span>
                                }
                                else
                                {
                                    <span class="badge badge-success ml-2">Fresh</span>
                                }
                            }
                        </dd>

                        <!-- Category information with null safety and fallback -->
                        <dt class="col-sm-4">Category</dt>
                        <dd class="col-sm-8">
                            @if (Model?.Category != null)
                            {
                                @Model.Category.CategoryName
                            }
                            else
                            {
                                <span>Not Categorized</span>
                            }
                        </dd>

                        <!-- Product status with conditional badge styling -->
                        <dt class="col-sm-4">Active</dt>
                        <dd class="col-sm-8">
                            @if (Model?.IsActive == true)
                            {
                                <span class="badge badge-success">Yes</span>
                            }
                            else
                            {
                                <span class="badge badge-secondary">No</span>
                            }
                        </dd>

                        <!-- Prescription requirement display -->
                        @if (Model?.RequiresPrescription == true)
                        {
                            <dt class="col-sm-4">Prescription</dt>
                            <dd class="col-sm-8">
                                <span class="badge badge-info">Required</span>
                            </dd>
                        }

                        <!-- Product creation date with fallback to current date -->
                        <dt class="col-sm-4">Created</dt>
                        <dd class="col-sm-8">
                            @(Model?.CreatedAt.ToString("MMM dd, yyyy") ?? DateTime.Now.ToString("MMM dd, yyyy"))
                        </dd>
                    </dl>
                </div>
            </div>

            <!-- Product description section with fallback message -->
            <div class="mt-4">
                <h5>Description</h5>
                <p>@(string.IsNullOrEmpty(Model?.Description) ? "No description available" : Model.Description)</p>
            </div>

            <hr>

            <!-- Deletion confirmation form -->
            <form asp-action="Delete" class="mt-4">
                <!-- Hidden field to pass product ID for deletion -->
                <input type="hidden" asp-for="ProductId" />
                <div class="form-group">
                    <!-- Confirm delete button with JavaScript confirmation -->
                    <button type="submit" class="btn btn-danger" id="confirmDeleteBtn">
                        <i class="fas fa-trash-alt"></i> Confirm Delete
                    </button>
                    <a href="@Url.Action("Index", "Product")" class="btn btn-outline-secondary ml-2">Cancel</a>
                </div>
            </form>
        </div>
    </div>

    <!-- Information sidebar with deletion warnings and alternative actions -->
    <div class="col-lg-4">
        <div class="delete-card">
            <div class="card-header">
                <h5 class="m-0 font-weight-bold">Deletion Information</h5>
            </div>
            <div class="p-3">
                <!-- Warning messages about deletion consequences -->
                <p><i class="fas fa-info-circle text-info mr-2"></i> Deleting this product will remove it permanently from the system.</p>
                <p><i class="fas fa-info-circle text-info mr-2"></i> All associated data with this product will also be deleted.</p>
                <p><i class="fas fa-info-circle text-info mr-2"></i> If you want to temporarily hide the product, consider disabling it instead.</p>

                <!-- NEW: Expiry-specific guidance -->
                @if (Model != null)
                {
                    var daysUntilExpiry = (Model.ExpiryDate.Date - DateTime.Now.Date).Days;
                    if (daysUntilExpiry < 0)
                    {
                        <div class="alert alert-info mt-3 p-2">
                            <small>
                                <i class="fas fa-lightbulb"></i>
                                <strong>Note:</strong> This product is expired and should be removed from inventory for safety reasons.
                            </small>
                        </div>
                    }
                    else if (daysUntilExpiry <= 30)
                    {
                        <div class="alert alert-warning mt-3 p-2">
                            <small>
                                <i class="fas fa-exclamation-triangle"></i>
                                <strong>Caution:</strong> This product is expiring soon but is still valid. Consider promotional pricing before deletion.
                            </small>
                        </div>
                    }
                }

                <hr>

                <!-- Alternative action buttons to prevent accidental deletions -->
                <div class="mt-3">
                    <h6>Alternative Actions</h6>
                    <!-- Edit option as safer alternative to deletion -->
                    <a href="@Url.Action("Edit", "Product", new { id = Model?.ProductId })" class="btn btn-outline-primary btn-block mb-2">
                        <i class="fas fa-edit mr-2"></i> Edit Instead
                    </a>
                    <!-- Back to list option -->
                    <a href="@Url.Action("Index", "Product")" class="btn btn-outline-info btn-block">
                        <i class="fas fa-arrow-left mr-2"></i> Back to List
                    </a>
                </div>
            </div>
        </div>

        <!-- NEW: Expiry Information Card -->
        @if (Model != null)
        {
            <div class="delete-card mt-3">
                <div class="card-header bg-warning">
                    <h6 class="m-0 font-weight-bold text-dark">
                        <i class="fas fa-calendar-times"></i> Expiry Information
                    </h6>
                </div>
                <div class="p-3">
                    <p><strong>Expiry Date:</strong> @Model.ExpiryDate.ToString("dddd, MMMM dd, yyyy")</p>

                    @{
                        var daysUntilExpiry = (Model.ExpiryDate.Date - DateTime.Now.Date).Days;
                    }

                    <p>
                        <strong>Status:</strong>
                        @if (daysUntilExpiry < 0)
                        {
                            <span class="text-danger">Expired @Math.Abs(daysUntilExpiry) days ago</span>
                        }
                        else if (daysUntilExpiry <= 30)
                        {
                            <span class="text-warning">Expires in @daysUntilExpiry days</span>
                        }
                        else
                        {
                            <span class="text-success">@daysUntilExpiry days remaining</span>
                        }
                    </p>

                    @if (daysUntilExpiry < 0)
                    {
                        <div class="alert alert-danger p-2 mt-2">
                            <small>
                                <i class="fas fa-exclamation-triangle"></i>
                                Expired products should be removed from inventory immediately for customer safety.
                            </small>
                        </div>
                    }
                    else if (daysUntilExpiry <= 7)
                    {
                        <div class="alert alert-warning p-2 mt-2">
                            <small>
                                <i class="fas fa-clock"></i>
                                Product expires very soon. Handle with care.
                            </small>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        // Enhanced confirmation dialog with expiry information
        $("#confirmDeleteBtn").on("click", function(e) {
        @if (Model != null)
        {
            var daysUntilExpiry = (Model.ExpiryDate.Date - DateTime.Now.Date).Days;
            var expiryMessage = "";

            if (daysUntilExpiry < 0)
            {
                expiryMessage = "This product is expired and should be removed.";
            }
            else if (daysUntilExpiry <= 30)
            {
                expiryMessage = "This product is expiring soon but is still valid.";
            }
            else
            {
                expiryMessage = "This product is still fresh with " + daysUntilExpiry + " days remaining.";
            }

            var confirmMessage = "Are you absolutely sure you want to delete this product?\n\n" +
                               "Expiry Status: " + expiryMessage + "\n\n" +
                               "This action cannot be undone.";
        }
        else
        {
            var confirmMessage = "Are you absolutely sure you want to delete this product?";
        }

            if (!confirm(confirmMessage)) {
                e.preventDefault();
            }
        });
    </script>
}